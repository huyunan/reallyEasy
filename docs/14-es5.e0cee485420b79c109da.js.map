{"version":3,"sources":["webpack:///node_modules/_text-lower-case@1.0.4@text-lower-case/dist.es2015/index.js","webpack:///node_modules/_text-no-case@1.0.2@text-no-case/dist.es2015/index.js","webpack:///node_modules/_text-dot-case@1.0.2@text-dot-case/dist.es2015/index.js","webpack:///node_modules/_text-param-case@1.0.2@text-param-case/dist.es2015/index.js","webpack:///node_modules/_text-upper-case@1.0.2@text-upper-case/dist.es2015/index.js","webpack:///node_modules/_text-constant-case@1.0.2@text-constant-case/dist.es2015/index.js","webpack:///node_modules/_lower-case@2.0.1@lower-case/dist.es2015/index.js","webpack:///node_modules/_no-case@3.0.3@no-case/dist.es2015/index.js","webpack:///node_modules/_pascal-case@3.1.1@pascal-case/dist.es2015/index.js","webpack:///node_modules/_camel-case@4.1.1@camel-case/dist.es2015/index.js","webpack:///src/app/easy/variable/variable.page.html","webpack:///src/app/easy/variable/variable.page.ts","webpack:///src/app/easy/variable/variable.module.ts"],"names":["lowerCase","str","toLowerCase","DEFAULT_SPLIT_REGEXP","DEFAULT_STRIP_REGEXP","noCase","input","options","_a","splitRegexp","_b","stripRegexp","_c","transform","_d","delimiter","result","replace","start","end","length","charAt","slice","split","map","join","re","value","RegExp","reduce","__assign","Object","assign","t","s","i","n","arguments","p","prototype","hasOwnProperty","call","apply","this","upperCase","toUpperCase","pascalCaseTransform","index","firstChar","lowerChars","substr","camelCaseTransform","VariablePage","VariablePageModule","rows","variableValue","errorMessage","type_select","successMessage","format_types","name","nullCheck","error","message","trim","ionFocus","unixs","wins","values","replaceValue","filter","a","forEach","b","format","copy","clear","forChild","path","component"],"mappings":"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","file":"x","sourcesContent":["/**\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n */\nvar SUPPORTED_LOCALE = {\n    tr: {\n        regexp: /\\u0130|\\u0049|\\u0049\\u0307/g,\n        map: {\n            İ: \"\\u0069\",\n            I: \"\\u0131\",\n            İ: \"\\u0069\",\n        },\n    },\n    az: {\n        regexp: /\\u0130/g,\n        map: {\n            İ: \"\\u0069\",\n            I: \"\\u0131\",\n            İ: \"\\u0069\",\n        },\n    },\n    lt: {\n        regexp: /\\u0049|\\u004A|\\u012E|\\u00CC|\\u00CD|\\u0128/g,\n        map: {\n            I: \"\\u0069\\u0307\",\n            J: \"\\u006A\\u0307\",\n            Į: \"\\u012F\\u0307\",\n            Ì: \"\\u0069\\u0307\\u0300\",\n            Í: \"\\u0069\\u0307\\u0301\",\n            Ĩ: \"\\u0069\\u0307\\u0303\",\n        },\n    },\n};\n/**\n * Localized lower case.\n */\nexport function localeLowerCase(str, locale) {\n    var lang = SUPPORTED_LOCALE[locale.toLowerCase()];\n    if (lang)\n        return lowerCase(str.replace(lang.regexp, function (m) { return lang.map[m]; }));\n    return lowerCase(str);\n}\n/**\n * Lower case as a function.\n */\nexport function lowerCase(str) {\n    return str.toLowerCase();\n}\n","import { lowerCase } from \"text-lower-case\";\n// Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\nvar DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];\n// Remove all non-word characters.\nvar DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;\n/**\n * Normalize text into something other libraries can manipulate easier.\n */\nexport function noCase(input, options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.splitRegexp, splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a, _b = options.stripRegexp, stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b, _c = options.transform, transform = _c === void 0 ? lowerCase : _c, _d = options.delimiter, delimiter = _d === void 0 ? \" \" : _d;\n    var result = replace(replace(input, splitRegexp, \"$1\\0$2\"), stripRegexp, \"\\0\");\n    var start = 0;\n    var end = result.length;\n    // Trim the delimiter from around the output string.\n    while (result.charAt(start) === \"\\0\")\n        start++;\n    while (result.charAt(end - 1) === \"\\0\")\n        end--;\n    // Transform each token independently.\n    return result.slice(start, end).split(\"\\0\").map(transform).join(delimiter);\n}\n/**\n * Replace `re` in the input string with the replacement value.\n */\nfunction replace(input, re, value) {\n    if (re instanceof RegExp)\n        return input.replace(re, value);\n    return re.reduce(function (input, re) { return input.replace(re, value); }, input);\n}\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { noCase } from \"text-no-case\";\nexport function dotCase(input, options) {\n    if (options === void 0) { options = {}; }\n    return noCase(input, __assign({ delimiter: \".\" }, options));\n}\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { dotCase } from \"text-dot-case\";\nexport function paramCase(input, options) {\n    if (options === void 0) { options = {}; }\n    return dotCase(input, __assign({ delimiter: \"-\" }, options));\n}\n","/**\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n */\nvar SUPPORTED_LOCALE = {\n    tr: {\n        regexp: /[\\u0069]/g,\n        map: {\n            i: \"\\u0130\",\n        },\n    },\n    az: {\n        regexp: /[\\u0069]/g,\n        map: {\n            i: \"\\u0130\",\n        },\n    },\n    lt: {\n        regexp: /[\\u0069\\u006A\\u012F]\\u0307|\\u0069\\u0307[\\u0300\\u0301\\u0303]/g,\n        map: {\n            i̇: \"\\u0049\",\n            j̇: \"\\u004A\",\n            į̇: \"\\u012E\",\n            i̇̀: \"\\u00CC\",\n            i̇́: \"\\u00CD\",\n            i̇̃: \"\\u0128\",\n        },\n    },\n};\n/**\n * Localized upper case.\n */\nexport function localeUpperCase(str, locale) {\n    var lang = SUPPORTED_LOCALE[locale.toLowerCase()];\n    if (lang)\n        return upperCase(str.replace(lang.regexp, function (m) { return lang.map[m]; }));\n    return upperCase(str);\n}\n/**\n * Upper case as a function.\n */\nexport function upperCase(str) {\n    return str.toUpperCase();\n}\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { noCase } from \"text-no-case\";\nimport { upperCase } from \"text-upper-case\";\nexport function constantCase(input, options) {\n    if (options === void 0) { options = {}; }\n    return noCase(input, __assign({ delimiter: \"_\", transform: upperCase }, options));\n}\n","/**\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n */\nvar SUPPORTED_LOCALE = {\n    tr: {\n        regexp: /\\u0130|\\u0049|\\u0049\\u0307/g,\n        map: {\n            İ: \"\\u0069\",\n            I: \"\\u0131\",\n            İ: \"\\u0069\"\n        }\n    },\n    az: {\n        regexp: /\\u0130/g,\n        map: {\n            İ: \"\\u0069\",\n            I: \"\\u0131\",\n            İ: \"\\u0069\"\n        }\n    },\n    lt: {\n        regexp: /\\u0049|\\u004A|\\u012E|\\u00CC|\\u00CD|\\u0128/g,\n        map: {\n            I: \"\\u0069\\u0307\",\n            J: \"\\u006A\\u0307\",\n            Į: \"\\u012F\\u0307\",\n            Ì: \"\\u0069\\u0307\\u0300\",\n            Í: \"\\u0069\\u0307\\u0301\",\n            Ĩ: \"\\u0069\\u0307\\u0303\"\n        }\n    }\n};\n/**\n * Localized lower case.\n */\nexport function localeLowerCase(str, locale) {\n    var lang = SUPPORTED_LOCALE[locale.toLowerCase()];\n    if (lang)\n        return lowerCase(str.replace(lang.regexp, function (m) { return lang.map[m]; }));\n    return lowerCase(str);\n}\n/**\n * Lower case as a function.\n */\nexport function lowerCase(str) {\n    return str.toLowerCase();\n}\n//# sourceMappingURL=index.js.map","import { lowerCase } from \"lower-case\";\n// Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\nvar DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];\n// Remove all non-word characters.\nvar DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;\n/**\n * Normalize the string into something other libraries can manipulate easier.\n */\nexport function noCase(input, options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.splitRegexp, splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a, _b = options.stripRegexp, stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b, _c = options.transform, transform = _c === void 0 ? lowerCase : _c, _d = options.delimiter, delimiter = _d === void 0 ? \" \" : _d;\n    var result = replace(replace(input, splitRegexp, \"$1\\0$2\"), stripRegexp, \"\\0\");\n    var start = 0;\n    var end = result.length;\n    // Trim the delimiter from around the output string.\n    while (result.charAt(start) === \"\\0\")\n        start++;\n    while (result.charAt(end - 1) === \"\\0\")\n        end--;\n    // Transform each token independently.\n    return result\n        .slice(start, end)\n        .split(\"\\0\")\n        .map(transform)\n        .join(delimiter);\n}\n/**\n * Replace `re` in the input string with the replacement value.\n */\nfunction replace(input, re, value) {\n    if (re instanceof RegExp)\n        return input.replace(re, value);\n    return re.reduce(function (input, re) { return input.replace(re, value); }, input);\n}\n//# sourceMappingURL=index.js.map","import { __assign } from \"tslib\";\nimport { noCase } from \"no-case\";\nexport function pascalCaseTransform(input, index) {\n    var firstChar = input.charAt(0);\n    var lowerChars = input.substr(1).toLowerCase();\n    if (index > 0 && firstChar >= \"0\" && firstChar <= \"9\") {\n        return \"_\" + firstChar + lowerChars;\n    }\n    return \"\" + firstChar.toUpperCase() + lowerChars;\n}\nexport function pascalCaseTransformMerge(input) {\n    return input.charAt(0).toUpperCase() + input.slice(1).toLowerCase();\n}\nexport function pascalCase(input, options) {\n    if (options === void 0) { options = {}; }\n    return noCase(input, __assign({ delimiter: \"\", transform: pascalCaseTransform }, options));\n}\n//# sourceMappingURL=index.js.map","import { __assign } from \"tslib\";\nimport { pascalCase, pascalCaseTransform, pascalCaseTransformMerge } from \"pascal-case\";\nexport function camelCaseTransform(input, index) {\n    if (index === 0)\n        return input.toLowerCase();\n    return pascalCaseTransform(input, index);\n}\nexport function camelCaseTransformMerge(input, index) {\n    if (index === 0)\n        return input.toLowerCase();\n    return pascalCaseTransformMerge(input);\n}\nexport function camelCase(input, options) {\n    if (options === void 0) { options = {}; }\n    return pascalCase(input, __assign({ transform: camelCaseTransform }, options));\n}\n//# sourceMappingURL=index.js.map","<app-header></app-header>\r\n<ion-content [fullscreen]=\"true\">\r\n  <ion-grid>\r\n    <ion-row>\r\n      <ion-col>\r\n        <ion-select interface=\"popover\" placeholder=\"请选择转换形式\" [(ngModel)]=\"type_select\">\r\n          <ng-container *ngFor=\"let type of format_types\">\r\n            <ion-select-option [value]=\"type.value\">{{type.name}}</ion-select-option>\r\n          </ng-container>\r\n        </ion-select>\r\n      </ion-col>\r\n    </ion-row>\r\n    <ion-row>\r\n      <ion-col>\r\n        <ion-item class=\"easy-ion-item\">\r\n          <ion-textarea id=\"easy-json-textarea\" placeholder=\"请输入需要转换的变量...\" (ionFocus)=\"ionFocus()\" autofocus=\"true\"\r\n            inputmode=\"text\" [rows]=\"rows\" [(ngModel)]=\"variableValue\"></ion-textarea>\r\n        </ion-item>\r\n      </ion-col>\r\n    </ion-row>\r\n    <ion-row>\r\n      <ion-col>\r\n        <ion-button (click)=\"format()\">格式化</ion-button>\r\n        <ion-button (click)=\"copy()\" color=\"success\">复制</ion-button>\r\n        <ion-button (click)=\"clear()\" color=\"danger\">清空</ion-button>\r\n      </ion-col>\r\n    </ion-row>\r\n    <ion-row>\r\n      <ion-col>\r\n        <pre *ngIf=\"errorMessage !== ''\" class=\"easy-error-block\">{{ errorMessage }}</pre>\r\n        <pre *ngIf=\"successMessage !== ''\" class=\"easy-success-block\">{{ successMessage }}</pre>\r\n      </ion-col>\r\n    </ion-row>\r\n  </ion-grid>\r\n  <app-footer></app-footer>\r\n</ion-content>","import { Component } from \"@angular/core\";\r\nimport { paramCase } from \"text-param-case\";\r\nimport { constantCase } from \"text-constant-case\";\r\nimport { camelCase } from \"camel-case\";\r\n\r\n@Component({\r\n  selector: \"app-variable\",\r\n  templateUrl: \"variable.page.html\",\r\n  styleUrls: [\"variable.page.scss\"],\r\n})\r\nexport class VariablePage {\r\n  // json文本框显示行数\r\n  rows = 20;\r\n  // json文本框值\r\n  variableValue = \"\";\r\n  errorMessage = \"\";\r\n  type_select = \"\";\r\n  successMessage = \"\";\r\n  format_types = [\r\n    // Transform into a string with the separator denoted by the next word capitalized.\r\n    {\r\n      value: \"camel\",\r\n      name: \"驼峰命名 testString\",\r\n    },\r\n    // Transform into upper case string with an underscore between words.\r\n    {\r\n      value: \"constant\",\r\n      name: \"下划线命名 TEST_STRING\",\r\n    },\r\n    // Transform into a lower cased string with dashes between words.\r\n    {\r\n      value: \"param\",\r\n      name: \"中横杠命名 test-string\",\r\n    },\r\n    // Transforms the string to lower case.\r\n    {\r\n      value: \"lower\",\r\n      name: \"小写命名 test string\",\r\n    },\r\n    // Transforms the string to upper case.\r\n    {\r\n      value: \"upper\",\r\n      name: \"大写命名 TEST STRING\",\r\n    },\r\n  ];\r\n\r\n  constructor() {}\r\n\r\n  // 格式化\r\n  format() {\r\n    if (this.nullCheck()) return;\r\n    try {\r\n      switch (this.type_select) {\r\n        case \"camel\":\r\n          this.variableValue = camelCase(this.variableValue);\r\n          break;\r\n        case \"constant\":\r\n          this.variableValue = constantCase(this.variableValue);\r\n          break;\r\n        case \"param\":\r\n          this.variableValue = paramCase(this.variableValue);\r\n          break;\r\n        case \"lower\":\r\n          this.variableValue = this.variableValue.toLowerCase();\r\n          break;\r\n        case \"upper\":\r\n          this.variableValue = this.variableValue.toUpperCase();\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n      this.errorMessage = \"\";\r\n      this.successMessage = \"格式化完成\";\r\n    } catch (error) {\r\n      this.successMessage = \"\";\r\n      this.errorMessage = error.message;\r\n    }\r\n  }\r\n\r\n  // 复制\r\n  copy() {\r\n    if (this.nullCheck()) return;\r\n    const clipboard = require(\"copy-to-clipboard\");\r\n    clipboard(this.variableValue.trim());\r\n    this.errorMessage = \"\";\r\n    this.successMessage = \"复制完成\";\r\n  }\r\n\r\n  // 清空\r\n  clear() {\r\n    if (this.nullCheck()) return;\r\n    this.variableValue = \"\";\r\n    this.ionFocus();\r\n  }\r\n\r\n  // json 输入值变更\r\n  ionFocus() {\r\n    this.errorMessage = \"\";\r\n    this.successMessage = \"\";\r\n  }\r\n\r\n  // 空 check\r\n  nullCheck() {\r\n    if (this.variableValue.trim() === \"\") {\r\n      this.successMessage = \"\";\r\n      this.errorMessage = \"请输入需要转换的json字符串!\";\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // 值替换\r\n  replace(value: string) {\r\n    const unixs = value.split(\"\\n\");\r\n    const wins = value.split(\"\\r\\n\");\r\n    let values = [];\r\n    if (unixs.length > wins.length) {\r\n      values = unixs;\r\n    } else {\r\n      values = wins;\r\n    }\r\n    let replaceValue = \"\";\r\n    values\r\n      .filter((a: string) => a.trim() !== \"\")\r\n      .forEach((b: string) => {\r\n        if (replaceValue === \"\") {\r\n          replaceValue += '(\"' + b + '\"';\r\n        } else {\r\n          replaceValue += ', \"' + b + '\"';\r\n        }\r\n      });\r\n    return replaceValue + \")\";\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport { VariablePage } from './variable.page';\r\nimport { HeaderPageModule } from '../header/header.module';\r\nimport { FooterPageModule } from '../footer/footer.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    HeaderPageModule,\r\n    FooterPageModule,\r\n    RouterModule.forChild([\r\n      {\r\n        path: '',\r\n        component: VariablePage,\r\n      }\r\n    ]),\r\n    IonicModule\r\n  ],\r\n  declarations: [VariablePage]\r\n})\r\nexport class VariablePageModule {}\r\n"]}