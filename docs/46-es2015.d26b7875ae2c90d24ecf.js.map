{"version":3,"sources":["webpack:///node_modules/_@ionic_core@5.5.1@@ionic/core/dist/esm/ion-route_4.entry.js"],"names":["Route","hostRef","this","ionRouteDataChanged","url","newValue","emit","oldValue","keys1","Object","keys","keys2","length","key","onUpdate","RouteRedirect","ionRouteRedirectChanged","generatePath","segments","filter","s","join","parsePath","path","split","map","trim","writeNavState","async","root","chain","direction","index","changed","animation","outlet","searchNavNode","componentOnReady","route","result","setRouteId","id","params","element","markVisible","e","console","error","QUERY","matches","querySelector","undefined","routeRedirect","routes","find","input","from","to","i","expected","matchesIDs","ids","len","Math","min","toLowerCase","matchesPath","inputPath","RouterSegments","allparams","matchesDefault","segment","data","next","slice","mergeParams","beforeEnter","beforeLeave","a","b","assign","routerPathToChain","chains","match","matchedChain","score","computePriority","level","pow","shift","readRedirects","Array","children","el","tagName","readProp","readRoutes","flattenRouterTree","readRouteNodes","node","component","Error","componentProps","prop","hasAttribute","getAttribute","nodes","flattenNode","push","sub","Router","ionRouteWillChange","ionRouteDidChange","previousPath","busy","state","lastState","useHash","debug","document","body","Promise","resolve","window","addEventListener","once","onRoutesChanged","onRedirectChanged","bind","historyDirection","getPath","canProceed","runGuards","redirect","writeNavStateRoot","ev","detail","register","processNextHandler","back","startsWith","URL","location","href","pathname","queryString","setPath","history","waitPromise","group","forEach","r","groupEnd","redirects","warn","getRouteId","maxMatches","plainIDs","param","safeWriteNavState","win","replaceState","title","redirectFrom","unlock","lock","p","toChain","fromChain","beforeEnterHook","beforeLeaveHook","canLeave","canEnter","routeEvent","routeChangeEvent","pushState","loc","hash","prefix","redirectFromPath","redirectedFrom","RouterLink","routerDirection","onClick","routerAnimation","mode","attrs","rel","target","class","color","style"],"mappings":"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","file":"x","sourcesContent":["import { r as registerInstance, e as createEvent, i as getElement, h, H as Host } from './index-e806d1f6.js';\nimport { b as getIonMode } from './ionic-global-9d5c8ee3.js';\nimport { m as debounce } from './helpers-90f46169.js';\nimport { o as openURL, c as createColorClasses } from './theme-ff3fc52f.js';\n\nconst Route = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n    /**\n     * Relative path that needs to match in order for this route to apply.\n     *\n     * Accepts paths similar to expressjs so that you can define parameters\n     * in the url /foo/:bar where bar would be available in incoming props.\n     */\n    this.url = '';\n  }\n  onUpdate(newValue) {\n    this.ionRouteDataChanged.emit(newValue);\n  }\n  onComponentProps(newValue, oldValue) {\n    if (newValue === oldValue) {\n      return;\n    }\n    const keys1 = newValue ? Object.keys(newValue) : [];\n    const keys2 = oldValue ? Object.keys(oldValue) : [];\n    if (keys1.length !== keys2.length) {\n      this.onUpdate(newValue);\n      return;\n    }\n    for (const key of keys1) {\n      if (newValue[key] !== oldValue[key]) {\n        this.onUpdate(newValue);\n        return;\n      }\n    }\n  }\n  connectedCallback() {\n    this.ionRouteDataChanged.emit();\n  }\n  static get watchers() { return {\n    \"url\": [\"onUpdate\"],\n    \"component\": [\"onUpdate\"],\n    \"componentProps\": [\"onComponentProps\"]\n  }; }\n};\n\nconst RouteRedirect = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n  }\n  propDidChange() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  connectedCallback() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  static get watchers() { return {\n    \"from\": [\"propDidChange\"],\n    \"to\": [\"propDidChange\"]\n  }; }\n};\n\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\nconst generatePath = (segments) => {\n  const path = segments\n    .filter(s => s.length > 0)\n    .join('/');\n  return '/' + path;\n};\nconst chainToPath = (chain) => {\n  const path = [];\n  for (const route of chain) {\n    for (const segment of route.path) {\n      if (segment[0] === ':') {\n        const param = route.params && route.params[segment.slice(1)];\n        if (!param) {\n          return null;\n        }\n        path.push(param);\n      }\n      else if (segment !== '') {\n        path.push(segment);\n      }\n    }\n  }\n  return path;\n};\nconst writePath = (history, root, useHash, path, direction, state, queryString) => {\n  let url = generatePath([\n    ...parsePath(root),\n    ...path\n  ]);\n  if (useHash) {\n    url = '#' + url;\n  }\n  if (queryString !== undefined) {\n    url = url + '?' + queryString;\n  }\n  if (direction === ROUTER_INTENT_FORWARD) {\n    history.pushState(state, '', url);\n  }\n  else {\n    history.replaceState(state, '', url);\n  }\n};\nconst removePrefix = (prefix, path) => {\n  if (prefix.length > path.length) {\n    return null;\n  }\n  if (prefix.length <= 1 && prefix[0] === '') {\n    return path;\n  }\n  for (let i = 0; i < prefix.length; i++) {\n    if (prefix[i].length > 0 && prefix[i] !== path[i]) {\n      return null;\n    }\n  }\n  if (path.length === prefix.length) {\n    return [''];\n  }\n  return path.slice(prefix.length);\n};\nconst readPath = (loc, root, useHash) => {\n  let pathname = loc.pathname;\n  if (useHash) {\n    const hash = loc.hash;\n    pathname = (hash[0] === '#')\n      ? hash.slice(1)\n      : '';\n  }\n  const prefix = parsePath(root);\n  const path = parsePath(pathname);\n  return removePrefix(prefix, path);\n};\nconst parsePath = (path) => {\n  if (path == null) {\n    return [''];\n  }\n  const removeQueryString = path.split('?')[0];\n  const segments = removeQueryString.split('/')\n    .map(s => s.trim())\n    .filter(s => s.length > 0);\n  if (segments.length === 0) {\n    return [''];\n  }\n  else {\n    return segments;\n  }\n};\n\nconst printRoutes = (routes) => {\n  console.group(`[ion-core] ROUTES[${routes.length}]`);\n  for (const chain of routes) {\n    const path = [];\n    chain.forEach(r => path.push(...r.path));\n    const ids = chain.map(r => r.id);\n    console.debug(`%c ${generatePath(path)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n  }\n  console.groupEnd();\n};\nconst printRedirects = (redirects) => {\n  console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n  for (const redirect of redirects) {\n    if (redirect.to) {\n      console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to)}`, 'font-weight: bold');\n    }\n  }\n  console.groupEnd();\n};\n\nconst writeNavState = async (root, chain, direction, index, changed = false, animation) => {\n  try {\n    // find next navigation outlet in the DOM\n    const outlet = searchNavNode(root);\n    // make sure we can continue interacting the DOM, otherwise abort\n    if (index >= chain.length || !outlet) {\n      return changed;\n    }\n    await outlet.componentOnReady();\n    const route = chain[index];\n    const result = await outlet.setRouteId(route.id, route.params, direction, animation);\n    // if the outlet changed the page, reset navigation to neutral (no direction)\n    // this means nested outlets will not animate\n    if (result.changed) {\n      direction = ROUTER_INTENT_NONE;\n      changed = true;\n    }\n    // recursively set nested outlets\n    changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\n    // once all nested outlets are visible let's make the parent visible too,\n    // using markVisible prevents flickering\n    if (result.markVisible) {\n      await result.markVisible();\n    }\n    return changed;\n  }\n  catch (e) {\n    console.error(e);\n    return false;\n  }\n};\nconst readNavState = async (root) => {\n  const ids = [];\n  let outlet;\n  let node = root;\n  // tslint:disable-next-line:no-constant-condition\n  while (true) {\n    outlet = searchNavNode(node);\n    if (outlet) {\n      const id = await outlet.getRouteId();\n      if (id) {\n        node = id.element;\n        id.element = undefined;\n        ids.push(id);\n      }\n      else {\n        break;\n      }\n    }\n    else {\n      break;\n    }\n  }\n  return { ids, outlet };\n};\nconst waitUntilNavNode = () => {\n  if (searchNavNode(document.body)) {\n    return Promise.resolve();\n  }\n  return new Promise(resolve => {\n    window.addEventListener('ionNavWillLoad', resolve, { once: true });\n  });\n};\nconst QUERY = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = (root) => {\n  if (!root) {\n    return undefined;\n  }\n  if (root.matches(QUERY)) {\n    return root;\n  }\n  const outlet = root.querySelector(QUERY);\n  return outlet ? outlet : undefined;\n};\n\nconst matchesRedirect = (input, route) => {\n  const { from, to } = route;\n  if (to === undefined) {\n    return false;\n  }\n  if (from.length > input.length) {\n    return false;\n  }\n  for (let i = 0; i < from.length; i++) {\n    const expected = from[i];\n    if (expected === '*') {\n      return true;\n    }\n    if (expected !== input[i]) {\n      return false;\n    }\n  }\n  return from.length === input.length;\n};\nconst routeRedirect = (path, routes) => {\n  return routes.find(route => matchesRedirect(path, route));\n};\nconst matchesIDs = (ids, chain) => {\n  const len = Math.min(ids.length, chain.length);\n  let i = 0;\n  for (; i < len; i++) {\n    if (ids[i].toLowerCase() !== chain[i].id) {\n      break;\n    }\n  }\n  return i;\n};\nconst matchesPath = (inputPath, chain) => {\n  const segments = new RouterSegments(inputPath);\n  let matchesDefault = false;\n  let allparams;\n  for (let i = 0; i < chain.length; i++) {\n    const path = chain[i].path;\n    if (path[0] === '') {\n      matchesDefault = true;\n    }\n    else {\n      for (const segment of path) {\n        const data = segments.next();\n        // data param\n        if (segment[0] === ':') {\n          if (data === '') {\n            return null;\n          }\n          allparams = allparams || [];\n          const params = allparams[i] || (allparams[i] = {});\n          params[segment.slice(1)] = data;\n        }\n        else if (data !== segment) {\n          return null;\n        }\n      }\n      matchesDefault = false;\n    }\n  }\n  const matches = (matchesDefault)\n    ? matchesDefault === (segments.next() === '')\n    : true;\n  if (!matches) {\n    return null;\n  }\n  if (allparams) {\n    return chain.map((route, i) => ({\n      id: route.id,\n      path: route.path,\n      params: mergeParams(route.params, allparams[i]),\n      beforeEnter: route.beforeEnter,\n      beforeLeave: route.beforeLeave\n    }));\n  }\n  return chain;\n};\nconst mergeParams = (a, b) => {\n  if (!a && b) {\n    return b;\n  }\n  else if (a && !b) {\n    return a;\n  }\n  else if (a && b) {\n    return Object.assign(Object.assign({}, a), b);\n  }\n  return undefined;\n};\nconst routerIDsToChain = (ids, chains) => {\n  let match = null;\n  let maxMatches = 0;\n  const plainIDs = ids.map(i => i.id);\n  for (const chain of chains) {\n    const score = matchesIDs(plainIDs, chain);\n    if (score > maxMatches) {\n      match = chain;\n      maxMatches = score;\n    }\n  }\n  if (match) {\n    return match.map((route, i) => ({\n      id: route.id,\n      path: route.path,\n      params: mergeParams(route.params, ids[i] && ids[i].params)\n    }));\n  }\n  return null;\n};\nconst routerPathToChain = (path, chains) => {\n  let match = null;\n  let matches = 0;\n  for (const chain of chains) {\n    const matchedChain = matchesPath(path, chain);\n    if (matchedChain !== null) {\n      const score = computePriority(matchedChain);\n      if (score > matches) {\n        matches = score;\n        match = matchedChain;\n      }\n    }\n  }\n  return match;\n};\nconst computePriority = (chain) => {\n  let score = 1;\n  let level = 1;\n  for (const route of chain) {\n    for (const path of route.path) {\n      if (path[0] === ':') {\n        score += Math.pow(1, level);\n      }\n      else if (path !== '') {\n        score += Math.pow(2, level);\n      }\n      level++;\n    }\n  }\n  return score;\n};\nclass RouterSegments {\n  constructor(path) {\n    this.path = path.slice();\n  }\n  next() {\n    if (this.path.length > 0) {\n      return this.path.shift();\n    }\n    return '';\n  }\n}\n\nconst readRedirects = (root) => {\n  return Array.from(root.children)\n    .filter(el => el.tagName === 'ION-ROUTE-REDIRECT')\n    .map(el => {\n    const to = readProp(el, 'to');\n    return {\n      from: parsePath(readProp(el, 'from')),\n      to: to == null ? undefined : parsePath(to),\n    };\n  });\n};\nconst readRoutes = (root) => {\n  return flattenRouterTree(readRouteNodes(root));\n};\nconst readRouteNodes = (root, node = root) => {\n  return Array.from(node.children)\n    .filter(el => el.tagName === 'ION-ROUTE' && el.component)\n    .map(el => {\n    const component = readProp(el, 'component');\n    if (component == null) {\n      throw new Error('component missing in ion-route');\n    }\n    return {\n      path: parsePath(readProp(el, 'url')),\n      id: component.toLowerCase(),\n      params: el.componentProps,\n      beforeLeave: el.beforeLeave,\n      beforeEnter: el.beforeEnter,\n      children: readRouteNodes(root, el)\n    };\n  });\n};\nconst readProp = (el, prop) => {\n  if (prop in el) {\n    return el[prop];\n  }\n  if (el.hasAttribute(prop)) {\n    return el.getAttribute(prop);\n  }\n  return null;\n};\nconst flattenRouterTree = (nodes) => {\n  const routes = [];\n  for (const node of nodes) {\n    flattenNode([], routes, node);\n  }\n  return routes;\n};\nconst flattenNode = (chain, routes, node) => {\n  const s = chain.slice();\n  s.push({\n    id: node.id,\n    path: node.path,\n    params: node.params,\n    beforeLeave: node.beforeLeave,\n    beforeEnter: node.beforeEnter\n  });\n  if (node.children.length === 0) {\n    routes.push(s);\n    return;\n  }\n  for (const sub of node.children) {\n    flattenNode(s, routes, sub);\n  }\n};\n\nconst Router = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n    this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n    this.previousPath = null;\n    this.busy = false;\n    this.state = 0;\n    this.lastState = 0;\n    /**\n     * By default `ion-router` will match the routes at the root path (\"/\").\n     * That can be changed when\n     *\n     */\n    this.root = '/';\n    /**\n     * The router can work in two \"modes\":\n     * - With hash: `/index.html#/path/to/page`\n     * - Without hash: `/path/to/page`\n     *\n     * Using one or another might depend in the requirements of your app and/or where it's deployed.\n     *\n     * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n     * requires additional server-side configuration in order to properly work.\n     *\n     * On the otherside hash-navigation is much easier to deploy, it even works over the file protocol.\n     *\n     * By default, this property is `true`, change to `false` to allow hash-less URLs.\n     */\n    this.useHash = true;\n  }\n  async componentWillLoad() {\n    console.debug('[ion-router] router will load');\n    await waitUntilNavNode();\n    console.debug('[ion-router] found nav');\n    await this.onRoutesChanged();\n  }\n  componentDidLoad() {\n    window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n    window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n  }\n  async onPopState() {\n    const direction = this.historyDirection();\n    let path = this.getPath();\n    const canProceed = await this.runGuards(path);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        path = parsePath(canProceed.redirect);\n      }\n      return false;\n    }\n    console.debug('[ion-router] URL changed -> update nav', path, direction);\n    return this.writeNavStateRoot(path, direction);\n  }\n  onBackButton(ev) {\n    ev.detail.register(0, processNextHandler => {\n      this.back();\n      processNextHandler();\n    });\n  }\n  /** @internal */\n  async canTransition() {\n    const canProceed = await this.runGuards();\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        return canProceed.redirect;\n      }\n      else {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Navigate to the specified URL.\n   *\n   * @param url The url to navigate to.\n   * @param direction The direction of the animation. Defaults to `\"forward\"`.\n   */\n  async push(url, direction = 'forward', animation) {\n    if (url.startsWith('.')) {\n      url = (new URL(url, window.location.href)).pathname;\n    }\n    console.debug('[ion-router] URL pushed -> updating nav', url, direction);\n    let path = parsePath(url);\n    let queryString = url.split('?')[1];\n    const canProceed = await this.runGuards(path);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        path = parsePath(canProceed.redirect);\n        queryString = canProceed.redirect.split('?')[1];\n      }\n      else {\n        return false;\n      }\n    }\n    this.setPath(path, direction, queryString);\n    return this.writeNavStateRoot(path, direction, animation);\n  }\n  /**\n   * Go back to previous page in the window.history.\n   */\n  back() {\n    window.history.back();\n    return Promise.resolve(this.waitPromise);\n  }\n  /** @internal */\n  async printDebug() {\n    console.debug('CURRENT PATH', this.getPath());\n    console.debug('PREVIOUS PATH', this.previousPath);\n    printRoutes(readRoutes(this.el));\n    printRedirects(readRedirects(this.el));\n  }\n  /** @internal */\n  async navChanged(direction) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, navChanged was cancelled');\n      return false;\n    }\n    const { ids, outlet } = await readNavState(window.document.body);\n    const routes = readRoutes(this.el);\n    const chain = routerIDsToChain(ids, routes);\n    if (!chain) {\n      console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\n      return false;\n    }\n    const path = chainToPath(chain);\n    if (!path) {\n      console.warn('[ion-router] router could not match path because some required param is missing');\n      return false;\n    }\n    console.debug('[ion-router] nav changed -> update URL', ids, path);\n    this.setPath(path, direction);\n    await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, path, null, ids.length);\n    return true;\n  }\n  onRedirectChanged() {\n    const path = this.getPath();\n    if (path && routeRedirect(path, readRedirects(this.el))) {\n      this.writeNavStateRoot(path, ROUTER_INTENT_NONE);\n    }\n  }\n  onRoutesChanged() {\n    return this.writeNavStateRoot(this.getPath(), ROUTER_INTENT_NONE);\n  }\n  historyDirection() {\n    const win = window;\n    if (win.history.state === null) {\n      this.state++;\n      win.history.replaceState(this.state, win.document.title, win.document.location && win.document.location.href);\n    }\n    const state = win.history.state;\n    const lastState = this.lastState;\n    this.lastState = state;\n    if (state > lastState || (state >= lastState && lastState > 0)) {\n      return ROUTER_INTENT_FORWARD;\n    }\n    else if (state < lastState) {\n      return ROUTER_INTENT_BACK;\n    }\n    else {\n      return ROUTER_INTENT_NONE;\n    }\n  }\n  async writeNavStateRoot(path, direction, animation) {\n    if (!path) {\n      console.error('[ion-router] URL is not part of the routing set');\n      return false;\n    }\n    // lookup redirect rule\n    const redirects = readRedirects(this.el);\n    const redirect = routeRedirect(path, redirects);\n    let redirectFrom = null;\n    if (redirect) {\n      this.setPath(redirect.to, direction);\n      redirectFrom = redirect.from;\n      path = redirect.to;\n    }\n    // lookup route chain\n    const routes = readRoutes(this.el);\n    const chain = routerPathToChain(path, routes);\n    if (!chain) {\n      console.error('[ion-router] the path does not match any route');\n      return false;\n    }\n    // write DOM give\n    return this.safeWriteNavState(document.body, chain, direction, path, redirectFrom, 0, animation);\n  }\n  async safeWriteNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n    const unlock = await this.lock();\n    let changed = false;\n    try {\n      changed = await this.writeNavState(node, chain, direction, path, redirectFrom, index, animation);\n    }\n    catch (e) {\n      console.error(e);\n    }\n    unlock();\n    return changed;\n  }\n  async lock() {\n    const p = this.waitPromise;\n    let resolve;\n    this.waitPromise = new Promise(r => resolve = r);\n    if (p !== undefined) {\n      await p;\n    }\n    return resolve;\n  }\n  async runGuards(to = this.getPath(), from = parsePath(this.previousPath)) {\n    if (!to || !from) {\n      return true;\n    }\n    const routes = readRoutes(this.el);\n    const toChain = routerPathToChain(to, routes);\n    const fromChain = routerPathToChain(from, routes);\n    const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n    const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n    const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\n    if (canLeave === false || typeof canLeave === 'object') {\n      return canLeave;\n    }\n    const canEnter = beforeEnterHook ? await beforeEnterHook() : true;\n    if (canEnter === false || typeof canEnter === 'object') {\n      return canEnter;\n    }\n    return true;\n  }\n  async writeNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, transition was cancelled');\n      return false;\n    }\n    this.busy = true;\n    // generate route event and emit will change\n    const routeEvent = this.routeChangeEvent(path, redirectFrom);\n    if (routeEvent) {\n      this.ionRouteWillChange.emit(routeEvent);\n    }\n    const changed = await writeNavState(node, chain, direction, index, false, animation);\n    this.busy = false;\n    if (changed) {\n      console.debug('[ion-router] route changed', path);\n    }\n    // emit did change\n    if (routeEvent) {\n      this.ionRouteDidChange.emit(routeEvent);\n    }\n    return changed;\n  }\n  setPath(path, direction, queryString) {\n    this.state++;\n    writePath(window.history, this.root, this.useHash, path, direction, this.state, queryString);\n  }\n  getPath() {\n    return readPath(window.location, this.root, this.useHash);\n  }\n  routeChangeEvent(path, redirectFromPath) {\n    const from = this.previousPath;\n    const to = generatePath(path);\n    this.previousPath = to;\n    if (to === from) {\n      return null;\n    }\n    const redirectedFrom = redirectFromPath ? generatePath(redirectFromPath) : null;\n    return {\n      from,\n      redirectedFrom,\n      to,\n    };\n  }\n  get el() { return getElement(this); }\n};\n\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\n\nconst RouterLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * When using a router, it specifies the transition direction when navigating to\n     * another page using `href`.\n     */\n    this.routerDirection = 'forward';\n    this.onClick = (ev) => {\n      openURL(this.href, ev, this.routerDirection, this.routerAnimation);\n    };\n  }\n  render() {\n    const mode = getIonMode(this);\n    const attrs = {\n      href: this.href,\n      rel: this.rel,\n      target: this.target\n    };\n    return (h(Host, { onClick: this.onClick, class: createColorClasses(this.color, {\n        [mode]: true,\n        'ion-activatable': true\n      }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\n  }\n};\nRouterLink.style = routerLinkCss;\n\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\n"]}